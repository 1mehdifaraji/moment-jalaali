// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var __hasProp = {}.hasOwnProperty;

  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['moment'], factory);
    } else if (typeof exports === 'object') {
      return module.exports = factory(require('moment'));
    } else {
      return factory(root.moment);
    }
  })(this, function(moment) {
    var d2g, d2j, div, formatFunctions, formatTokenFunctions, formattingTokens, g2d, i, j2d, jWeekOfYear, jalCal, key, lang, langProto, leftZeroFill, makeFormatFunction, mod, normalizeUnits, ordinalizeToken, ordinalizeTokens, padToken, paddedTokens, setDate, toGregorian, toJalaali, unitAliases, value, _format, _startOf;
    if (moment == null) {
      throw new Error('Cannot find moment');
    }
    /*
        Overrides
    */

    _format = moment.fn.format;
    _startOf = moment.fn.startOf;
    /*
        Constants
    */

    formattingTokens = /j(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?)|[^j]+/g;
    unitAliases = {
      jm: 'jmonth',
      jy: 'jyear'
    };
    formatFunctions = {};
    ordinalizeTokens = 'DDD w M D'.split(' ');
    paddedTokens = 'M D w'.split(' ');
    formatTokenFunctions = {
      jM: function() {
        return this.jMonth() + 1;
      },
      jMMM: function(format) {
        return this.lang().jMonthsShort(this, format);
      },
      jMMMM: function(format) {
        return this.lang().jMonths(this, format);
      },
      jD: function() {
        return this.jDate();
      },
      jDDD: function() {
        return this.jDayOfYear();
      },
      jw: function() {
        return this.jWeek();
      },
      jYY: function() {
        return leftZeroFill(this.jYear() % 100, 2);
      },
      jYYYY: function() {
        return leftZeroFill(this.jYear(), 4);
      },
      jYYYYY: function() {
        return leftZeroFill(this.jYear(), 5);
      },
      jgg: function() {
        return leftZeroFill(this.jWeekYear() % 100, 2);
      },
      jgggg: function() {
        return this.jWeekYear();
      },
      jggggg: function() {
        return leftZeroFill(this.jWeekYear(), 5);
      }
    };
    padToken = function(func, count) {
      return function(a) {
        return leftZeroFill(func.call(this, a), count);
      };
    };
    ordinalizeToken = function(func, period) {
      return function(a) {
        return this.lang().ordinal(func.call(this, a), period);
      };
    };
    while (ordinalizeTokens.length) {
      i = ordinalizeTokens.pop();
      formatTokenFunctions['j' + i + 'o'] = ordinalizeToken(formatTokenFunctions['j' + i], i);
    }
    while (paddedTokens.length) {
      i = paddedTokens.pop();
      formatTokenFunctions['j' + i + i] = padToken(formatTokenFunctions['j' + i], 2);
    }
    formatTokenFunctions.jDDDD = padToken(formatTokenFunctions.jDDD, 3);
    /*
        Helpers
    */

    leftZeroFill = function(number, targetLength) {
      var output;
      output = number + '';
      while (output.length < targetLength) {
        output = '0' + output;
      }
      return output;
    };
    normalizeUnits = function(units) {
      if (units) {
        return unitAliases[units] || units.toLowerCase().replace(/(.)s$/, '$1');
      } else {
        return units;
      }
    };
    setDate = function(year, month, date) {
      var utc;
      utc = this._isUTC ? 'UTC' : '';
      this._d['set' + utc + 'FullYear'](year);
      this._d['set' + utc + 'Month'](month);
      return this._d['set' + utc + 'Date'](date);
    };
    /*
        Languages
    */

    lang = {
      _jMonths: ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Amordad', 'Shahrivar', 'Mehr', 'Aban', 'Azar', 'Dey', 'Bahman', 'Esfand'],
      jMonths: function(m) {
        return this._jMonths[m.jMonth()];
      },
      _jMonthsShort: ['Far', 'Ord', 'Kho', 'Tir', 'Amo', 'Sha', 'Meh', 'Aba', 'Aza', 'Dey', 'Bah', 'Esf'],
      jMonthsShort: function(m) {
        return this._jMonthsShort[m.jMonth()];
      },
      _jWeek: {
        dow: 0,
        doy: 6
      },
      jWeek: function(m) {
        return jWeekOfYear(m, this._jWeek.dow, this._jWeek.doy).week;
      }
    };
    langProto = moment.langData().__proto__;
    for (key in lang) {
      if (!__hasProp.call(lang, key)) continue;
      value = lang[key];
      langProto[key] = value;
    }
    /*
        Formatting
    */

    makeFormatFunction = function(format) {
      var array, match, _i, _len;
      array = format.match(formattingTokens);
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        match = array[i];
        if (formatTokenFunctions[match]) {
          array[i] = formatTokenFunctions[match];
        }
      }
      return function(mom) {
        var output, _j, _len1;
        output = '';
        for (i = _j = 0, _len1 = array.length; _j < _len1; i = ++_j) {
          match = array[i];
          if (match instanceof Function) {
            output += '[' + match.call(mom, format) + ']';
          } else {
            output += match;
          }
        }
        return output;
      };
    };
    /*
        Week of Year
    */

    jWeekOfYear = function(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
      var adjustedMoment, daysToDayOfWeek, end;
      end = firstDayOfWeekOfYear - firstDayOfWeek;
      if (end < 0) {
        end += 7;
      }
      daysToDayOfWeek = firstDayOfWeekOfYear - mom.day();
      if (daysToDayOfWeek > end) {
        daysToDayOfWeek -= 7;
      }
      if (daysToDayOfWeek <= end - 7) {
        daysToDayOfWeek += 7;
      }
      adjustedMoment = moment(mom).add('d', daysToDayOfWeek);
      return {
        week: Math.ceil(adjustedMoment.jDayOfYear() / 7),
        year: adjustedMoment.jYear()
      };
    };
    /*
        Methods
    */

    moment.fn.format = function(format) {
      if (format) {
        if (!formatFunctions[format]) {
          formatFunctions[format] = makeFormatFunction(format);
        }
        format = formatFunctions[format](this);
      }
      return _format.call(this, format);
    };
    moment.fn.jYear = moment.fn.jYears = function(input) {
      var gd, gm, gy, jd, jm, jy, lastDay, _ref, _ref1;
      if (typeof input === 'number') {
        _ref = toJalaali(this.year(), this.month(), this.date()), jy = _ref.jy, jm = _ref.jm, jd = _ref.jd;
        lastDay = Math.min(jd, moment.jDaysInMonth(input, jm));
        _ref1 = toGregorian(input, jm, lastDay), gy = _ref1.gy, gm = _ref1.gm, gd = _ref1.gd;
        setDate.call(this, gy, gm, gd);
        moment.updateOffset(this);
        return this;
      } else {
        return toJalaali(this.year(), this.month(), this.date()).jy;
      }
    };
    moment.fn.jMonth = moment.fn.jMonths = function(input) {
      var gd, gm, gy, jd, jm, jy, lastDay, _ref, _ref1;
      if (typeof input === 'number') {
        _ref = toJalaali(this.year(), this.month(), this.date()), jy = _ref.jy, jm = _ref.jm, jd = _ref.jd;
        lastDay = Math.min(jd, moment.jDaysInMonth(jy, input));
        _ref1 = toGregorian(jy, input, lastDay), gy = _ref1.gy, gm = _ref1.gm, gd = _ref1.gd;
        setDate.call(this, gy, gm, gd);
        moment.updateOffset(this);
        return this;
      } else {
        return toJalaali(this.year(), this.month(), this.date()).jm;
      }
    };
    moment.fn.jDate = moment.fn.jDates = function(input) {
      var gd, gm, gy, jd, jm, jy, _ref, _ref1;
      if (typeof input === 'number') {
        _ref = toJalaali(this.year(), this.month(), this.date()), jy = _ref.jy, jm = _ref.jm, jd = _ref.jd;
        _ref1 = toGregorian(jy, jm, input), gy = _ref1.gy, gm = _ref1.gm, gd = _ref1.gd;
        setDate.call(this, gy, gm, gd);
        moment.updateOffset(this);
        return this;
      } else {
        return toJalaali(this.year(), this.month(), this.date()).jd;
      }
    };
    moment.fn.jDayOfYear = function(input) {
      var dayOfYear;
      dayOfYear = Math.round((moment(this).startOf('day') - moment(this).startOf('jYear')) / 864e5) + 1;
      if (input == null) {
        return dayOfYear;
      } else {
        return this.add('d', input - dayOfYear);
      }
    };
    moment.fn.jWeek = moment.fn.jWeeks = function(input) {
      var week;
      week = this.lang().jWeek(this);
      if (input == null) {
        return week;
      } else {
        return this.add('d', (input - week) * 7);
      }
    };
    moment.fn.startOf = function(units) {
      units = normalizeUnits(units);
      if (units === 'jyear' || units === 'jmonth') {
        if (units === 'jyear') {
          this.jMonth(0);
        }
        this.jDate(1);
        this.hours(0);
        this.minutes(0);
        this.seconds(0);
        this.milliseconds(0);
        return this;
      } else {
        return _startOf.call(this, units);
      }
    };
    /*
        Statics
    */

    moment.jDaysInMonth = function(year, month) {
      if (month < 6) {
        return 31;
      } else if (month < 11) {
        return 30;
      } else if (moment.jIsLeapYear(year)) {
        return 30;
      } else {
        return 29;
      }
    };
    moment.jIsLeapYear = function(year) {
      return jalCal(year).leap === 0;
    };
    /*
        Conversion
    */

    toJalaali = function(gy, gm, gd) {
      var j;
      j = d2j(g2d(gy, gm + 1, gd));
      j.jm -= 1;
      return j;
    };
    toGregorian = function(jy, jm, jd) {
      var g;
      g = d2g(j2d(jy, jm + 1, jd));
      g.gm -= 1;
      return g;
    };
    moment.jConvert = {
      toJalaali: toJalaali,
      toGregorian: toGregorian
    };
    div = function(a, b) {
      return parseInt(a / b, 10);
    };
    mod = function(a, b) {
      return a - parseInt(a / b, 10) * b;
    };
    jalCal = function(jy) {
      var bl, breaks, gy, jm, jp, jump, leap, leapG, leapJ, march, n, _i, _len, _ref;
      breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];
      bl = breaks.length;
      gy = jy + 621;
      leapJ = -14;
      jp = breaks[0];
      if (jy < jp || jy >= breaks[bl - 1]) {
        throw new Error('Invalid Jalaali year ' + jy);
      }
      _ref = breaks.slice(1, bl);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        jm = _ref[_i];
        jump = jm - jp;
        if (jy < jm) {
          break;
        }
        leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);
        jp = jm;
      }
      n = jy - jp;
      leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);
      if (mod(jump, 33) === 4 && jump - n === 4) {
        leapJ += 1;
      }
      leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150;
      march = 20 + leapJ - leapG;
      if (jump - n < 6) {
        n = n - jump + div(jump + 4, 33) * 33;
      }
      leap = mod(mod(n + 1, 33) - 1, 4);
      if (leap === -1) {
        leap = 4;
      }
      return {
        leap: leap,
        gy: gy,
        march: march
      };
    };
    j2d = function(jy, jm, jd) {
      var gy, leap, march, _ref;
      _ref = jalCal(jy), leap = _ref.leap, gy = _ref.gy, march = _ref.march;
      return g2d(gy, 3, march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;
    };
    d2j = function(jdn) {
      var gy, jd, jdn1f, jm, jy, k, leap, march, _ref;
      gy = d2g(jdn).gy;
      jy = gy - 621;
      _ref = jalCal(jy), leap = _ref.leap, march = _ref.march;
      jdn1f = g2d(gy, 3, march);
      k = jdn - jdn1f;
      if (k >= 0) {
        if (k <= 185) {
          jm = 1 + div(k, 31);
          jd = mod(k, 31) + 1;
          return {
            jy: jy,
            jm: jm,
            jd: jd
          };
        } else {
          k -= 186;
        }
      } else {
        jy -= 1;
        k += 179;
        if (leap === 1) {
          k += 1;
        }
      }
      jm = 7 + div(k, 30);
      jd = mod(k, 30) + 1;
      return {
        jy: jy,
        jm: jm,
        jd: jd
      };
    };
    g2d = function(gy, gm, gd) {
      var d;
      d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408;
      d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
      return d;
    };
    d2g = function(jdn) {
      var gd, gm, gy, j;
      j = 4 * jdn + 139361631;
      j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
      i = div(mod(j, 1461), 4) * 5 + 308;
      gd = div(mod(i, 153), 5) + 1;
      gm = mod(div(i, 153), 12) + 1;
      gy = div(j, 1461) - 100100 + div(8 - gm, 6);
      return {
        gy: gy,
        gm: gm,
        gd: gd
      };
    };
  });

}).call(this);
